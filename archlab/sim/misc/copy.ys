# sum_list implementation
# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	call main		# Execute main program
	halt			# Terminate program 

# test blocks
	.align 8
# Source block
src:
	.quad 0x00a
	.quad 0x0b0
	.quad 0xc00

# Destination block
dest:
	.quad 0x111
	.quad 0x222
	.quad 0x333

# main program
main:	irmovq src, %rdi
	irmovq dest, %rsi
	irmovq $3, %rdx	
	call copy_block	# c
	ret 
	
/* $begin copy_block */
# long rsum_list(list_ptr ls)
# ele1 in %rdi
copy_block:
	xorq %rax, %rax	# rax = 0
	andq %rdx, %rdx	# set CC without changing rdi
	jmp test		# if not 0, goto else
loop:
	irmovq $8, %r10	# incrm ptrs by 8, better if out of loop
	
	mrmovq $0(%rdi), %r11
	rmmovq %r11, $0(%rsi)
	
	addq %r10, %rdi
	addq %r10, %rsi
	
	xorq %r11, %rax
	irmovq $1, %r10
	subq %r10, %rdx
	
test:
	jne loop
	ret
	
/* $end copy_block */

# The stack starts here and grows to lower addresses
	.pos 0x200		
stack:	 
